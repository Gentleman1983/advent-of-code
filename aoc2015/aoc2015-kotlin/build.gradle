import com.pswidersk.gradle.python.VenvTask

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'com.pswidersk.python-plugin'
}

dependencies {
    api project(":utils")

    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Version': project.version
    }
}

pythonPlugin {
    pythonVersion = "3.12"
    condaVersion = "latest"
    installDir = file(rootProject.layout.buildDirectory.file("python"))
}

afterEvaluate {
    def pipTask = tasks.register('pipInstall', VenvTask) {
        venvExec = "pip"
        args = ["install", "--isolated", "-r", "requirements.txt"]
    }

    def solverTask = tasks.register('solveDay19Part2', VenvTask) {
        workingDir = project.file('src/main/resources')
        args = [project.file("src/main/python/solveDay19Part2.py").toString()]
        dependsOn(pipTask)
    }

    def testSolverTask = tasks.register('testSolveDay19Part2', VenvTask) {
        venvExec = "pytest"
        workingDir = project.file('src/test/resources')
        args = [
                "--cov-report", "term",
                "--cov-report", "html:${project.layout.buildDirectory.file('reports/pytest-cov').get().asFile.canonicalPath}",
                "--cov-report", "xml:${project.layout.buildDirectory.file('reports/pytest-cov/coverage.xml').get().asFile.canonicalPath}",
                "--cov-report", "json:${project.layout.buildDirectory.file('reports/pytest-cov/coverage.json').get().asFile.canonicalPath}",
                "--cov-report", "lcov:${project.layout.buildDirectory.file('reports/pytest-cov/coverage.lcov').get().asFile.canonicalPath}",
                "--cov=solveDay19Part2",
                project.file("src/test/python/testSolveDay19Part2.py").toString()
        ]
        environment = Map.of(
                "PYTHONPATH", project.file('src/main/python').getCanonicalPath(),

        )
        dependsOn(pipTask)
    }

    compileKotlin.dependsOn(solverTask)
    check.dependsOn(testSolverTask)
}

sonarqube {
    properties {
        property 'sonar.python.version', '3.12'
        property 'sonar.python.coverage.reportPaths', 'build/reports/pytest-cov/coverage.xml'
    }
}
