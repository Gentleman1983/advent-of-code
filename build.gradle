plugins {
    id 'org.sonarqube' version '4.4.1.3373'
}

// project meta data
group 'de.havox_design.aoc2016'
version '0.19.0'

// Switch to gradle "all" distribution.
wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion '8.5'
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectKey", "de.havox_design.aoc2016:advent_of_code_2016"
        property "sonar.organization", "havox"
        property "sonar.sourceEncoding", "UTF-8"
    }
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

// Add maven central for all projects
allprojects {
    repositories {
        mavenCentral()
    }
}

// Add tasks to subprojects
subprojects {
    apply plugin: 'application'
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
    }

    dependencies {
        if(!'utils'.equals(project.name)) {
            implementation project(':utils')
        }

        testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    application {
        mainClass = "de.havox_design.${rootProject.name}.${project.name}.MainClass"
    }

    jacoco {
        toolVersion = '0.8.11'
    }

    jacocoTestReport {
        reports {
            html.required.set(true)
            xml.required.set(true)
            xml.outputLocation.set(file("${project.layout.buildDirectory}/jacoco/jacoco.xml"))
        }

        rootProject.tasks.sonar.dependsOn(it)
    }

    jar {
        manifest {
            attributes 'Implementation-Title': project.name
            attributes 'Implementation-Version': project.version
            attributes 'Main-Class': "de.havox_design.${rootProject.name}.${project.name}.MainClass"
        }
    }

    sonarqube {
        properties {
            property "sonar.coverage.jacoco.xmlReportPath", "${project.layout.buildDirectory}/jacoco/jacoco.xml"
        }
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()

        reports {
            junitXml.required = true
            html.required = true
        }

        jacocoTestReport.dependsOn(it)
    }
}
