import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
    id 'jacoco-report-aggregation'
    id 'java-library'
    id 'org.sonarqube' version '4.4.1.3373'
}

// project meta data
group 'de.havox_design.aoc'
version '2023.27.17'

dependencies {
    jacocoAggregation project(":aoc2015")
    jacocoAggregation project(":aoc2015:aoc2015-java")
    jacocoAggregation project(":aoc2015:aoc2015-kotlin")

    jacocoAggregation project(":aoc2016")
    jacocoAggregation project(":aoc2016:aoc2016-groovy")
    jacocoAggregation project(":aoc2016:aoc2016-java")
    jacocoAggregation project(":aoc2016:aoc2016-kotlin")

    jacocoAggregation project(":aoc2017")
    jacocoAggregation project(":aoc2017:aoc2017-java")
    jacocoAggregation project(":aoc2017:aoc2017-scala")

    jacocoAggregation project(":aoc2022")
    jacocoAggregation project(":aoc2022:aoc2022-kotlin")
    jacocoAggregation project(":aoc2022:aoc2022-scala")

    jacocoAggregation project(":aoc2023")

    jacocoAggregation project(":meilisearch")

    jacocoAggregation project(":utils")
    jacocoAggregation project(":utils:utils-java")
    jacocoAggregation project(":utils:utils-kotlin")
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectKey", "de.havox_design.aoc:advent_of_code"
        property "sonar.organization", "havox"
        property "sonar.sourceEncoding", "UTF-8"

        //property "sonar.coverage.jacoco.xmlReportPaths", "${rootProject.layout.buildDirectory.get().asFile.absolutePath}/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml"
    }
}

if(tasks.findByName('check') == null) {
    tasks.register('check') {}
}

tasks.named('check') {
    dependsOn tasks.named('testCodeCoverageReport')
}

// Switch to gradle "all" distribution.
wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion '8.5'
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'java-library'

    repositories {
        mavenCentral()
    }

    jacoco {
        toolVersion = '0.8.11'
    }

    jacocoTestReport {
        reports {
            html.required.set(true)
            xml.required.set(true)
        }

        rootProject.tasks.sonar.dependsOn(it)
    }

    sonar {
        properties {
            property "sonar.coverage.jacoco.xmlReportPaths", "${rootProject.layout.buildDirectory.get().asFile.absolutePath}/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml"
        }
    }

    tasks.named('check') {
        dependsOn 'jacocoTestReport'
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()

        testLogging {
            exceptionFormat = TestExceptionFormat.FULL
            events("passed", "failed", "skipped")
        }

        reports {
            junitXml.required = true
            html.required = true
        }
    }
}
